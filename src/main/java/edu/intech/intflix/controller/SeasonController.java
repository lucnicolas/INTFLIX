package edu.intech.intflix.controller;

import edu.intech.intflix.data.model.Season;
import edu.intech.intflix.data.repository.SeasonRepository;
import edu.intech.intflix.exeption.IdMismatchException;
import edu.intech.intflix.exeption.InvalidEntryException;
import edu.intech.intflix.exeption.NotFoundException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController // This means that this class is a Controller
@CrossOrigin(origins = "http://localhost:4200")
@RequestMapping(path="/api/seasons") // This means URL's start with /api (after Application path)
public class SeasonController {
    @Autowired  // This means to get the bean called SeasonRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private SeasonRepository repository;

    /**
     * Get all seasons
     * @return a list of Seasons
     */
    @GetMapping // Map ONLY GET Requests
    public List<Season> findAll() {
        // This returns a JSON or XML with the seasons
        return repository.findAll();
    }

    /**
     * Get season by name
     * @param seasonNumber
     * @return called season
     */
    @GetMapping("/number/{seasonNumber}") // Map ONLY GET Requests
    public Season findByNumber(@PathVariable int seasonNumber) {
        // @PathVariable means it is a parameter from path
        return repository.findByNumber(seasonNumber);
    }

    /**
     * Get Season by id
     * @param id
     * @return called season
     * @throws NotFoundException
     */
    @GetMapping("/{id}") // Map ONLY GET Requests
    public Season findOne(@PathVariable Long id) throws NotFoundException {
        return repository.findById(id)
                .orElseThrow(NotFoundException::new);
    }

    /**
     * Create a new season
     * @param season
     * @return created season
     */
    @PostMapping // Map ONLY POST Requests
    @ResponseStatus(HttpStatus.CREATED)
    public Season create(@RequestBody Season season) throws InvalidEntryException {
        if (season.getNumber() > 0) {
            return repository.save(season);
        } else {
            throw new InvalidEntryException();
        }
    }

    /**
     * @param id
     * @throws NotFoundException
     */
    @DeleteMapping("/{id}")
    public void delete(@PathVariable Long id) throws NotFoundException {
        repository.findById(id)
                .orElseThrow(NotFoundException::new);
        repository.deleteById(id);
    }

    /**
     * Delete all seasons
     */
    @DeleteMapping // Map ONLY DELETE Requests
    public void delete() {
        repository.deleteAll();
    }

    /**
     * Update sent season
     * @param season Season object
     * @param id Season id
     * @return saved season
     * @throws IdMismatchException
     * @throws NotFoundException
     */
    @PutMapping("/{id}") // Map ONLY PUT Requests
    public Season updateSeason(@RequestBody Season season, @PathVariable Long id) throws IdMismatchException, NotFoundException {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        if (season.getId() != id) {
            throw new IdMismatchException();
        }
        repository.findById(id)
                .orElseThrow(IdMismatchException::new);
        return repository.save(season);
    }
}