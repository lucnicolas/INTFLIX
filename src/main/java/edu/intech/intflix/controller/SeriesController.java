package edu.intech.intflix.controller;

import edu.intech.intflix.data.model.Series;
import edu.intech.intflix.data.repository.SeriesRepository;
import edu.intech.intflix.exeption.IdMismatchException;
import edu.intech.intflix.exeption.NotFoundException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController // This means that this class is a Controller
@CrossOrigin(origins = "http://localhost:4200")
@RequestMapping(path="/api/series") // This means URL's start with /api (after Application path)
public class SeriesController {
    @Autowired  // This means to get the bean called SeriesRepository
                // Which is auto-generated by Spring, we will use it to handle the data
    private SeriesRepository repository;

    /**
     * Get all series
     * @return a list of Series
     */
    @GetMapping // Map ONLY GET Requests
    public List<Series> findAll() {
        // This returns a JSON or XML with the series
        return repository.findAll();
    }

    /**
     * Get series by name
     * @param seriesName
     * @return called series
     */
    @GetMapping("/name/{seriesName}") // Map ONLY GET Requests
    public Series findByName(@PathVariable String seriesName) {
        // @PathVariable means it is a parameter from path
        return repository.findByName(seriesName);
    }

    /**
     * Get Series by id
     * @param id
     * @return called series
     * @throws NotFoundException
     */
    @GetMapping("/{id}") // Map ONLY GET Requests
    public Series findOne(@PathVariable Long id) throws NotFoundException {
        return repository.findById(id)
                .orElseThrow(NotFoundException::new);
    }

    /**
     * Create a new series
     * @param series
     * @return created series
     */
    @PostMapping // Map ONLY POST Requests
    @ResponseStatus(HttpStatus.CREATED)
    public Series create(@RequestBody Series series) {
        return repository.save(series);
    }

    @DeleteMapping("/{id}")
    public void delete(@PathVariable Long id) throws NotFoundException {
        repository.findById(id)
                .orElseThrow(NotFoundException::new);
        repository.deleteById(id);
    }

    /**
     * Delete all series
     */
    @DeleteMapping // Map ONLY DELETE Requests
    public void delete() {
        repository.deleteAll();
    }

    /**
     * Update sent series
     * @param series Series object
     * @param id Series id
     * @return saved series
     * @throws IdMismatchException
     * @throws NotFoundException
     */
    @PutMapping("/{id}") // Map ONLY PUT Requests
    public Series updateSeries(@RequestBody Series series, @PathVariable Long id) throws IdMismatchException, NotFoundException {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        if (series.getId() != id) {
            throw new IdMismatchException();
        }
        repository.findById(id)
                .orElseThrow(NotFoundException::new);
        return repository.save(series);
    }
}
